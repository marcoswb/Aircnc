{"version":3,"sources":["detach/AssetBundle.js"],"names":["EXPO_DOMAINS","ASSETS_DIR_DEFAULT_URL","async","bundleAsync","context","assets","dest","await","fs","ensureDir","urlResolver","createAssetsUrlResolver","batches","_","chunk","batch","Promise","all","map","asset","extensionIndex","lastIndexOf","prefixLength","length","hash","substring","saveUrlToPathAsync","path","join","let","assetsDirUrl","published","assetUrlOverride","config","publishedUrl","url","hostname","parse","maybeExpoDomain","takeRight","split","includes","resolve"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAEA,MAAMA,YAAAA,GAAe,CAAC,SAAD,EAAY,UAAZ,EAAwB,WAAxB,EAAqC,WAArC,CAArB;AACA,MAAMC,sBAAAA,GAAyB,+CAA/B;;AAEOC,eAAeC,WAAfD,CAA2BE,OAA3BF,EAAoCG,MAApCH,EAA4CI,IAA5CJ,EAAkD;AACvD,MAAI,CAACG,MAAL,EAAa;AACX;AACF;;AAEAE,QAAMC,mBAAGC,SAAHD,CAAaF,IAAbE,CAAND;AAEA,QAAMG,WAAAA,GAAcC,uBAAuB,CAACP,OAAD,CAA3C;;AAEA,QAAMQ,OAAAA,GAAUC,kBAAEC,KAAFD,CAAQR,MAARQ,EAAgB,CAAhBA,CAAhB;;AACA,OAAK,MAAME,KAAX,IAAoBH,OAApB,EAA6B;AAC3BL,UAAMS,OAAO,CAACC,GAARD,CACJD,KAAK,CAACG,GAANH,CAAUb,MAAMiB,KAANjB,IAAe;AACvB,YAAMkB,cAAAA,GAAiBD,KAAK,CAACE,WAANF,CAAkB,GAAlBA,CAAvB;AACA,YAAMG,YAAAA,GAAe,SAASC,MAA9B;AACA,YAAMC,IAAAA,GACJJ,cAAAA,IAAkB,CAAlBA,GACID,KAAK,CAACM,SAANN,CAAgBG,YAAhBH,EAA8BC,cAA9BD,CADJC,GAEID,KAAK,CAACM,SAANN,CAAgBG,YAAhBH,CAHN;AAIAZ,YAAMmB,yCAAmBhB,WAAW,CAACc,IAAD,CAA9BE,EAAsCC,gBAAKC,IAALD,CAAUrB,IAAVqB,EAAgBR,KAAhBQ,CAAtCD,CAANnB;AACD,KARDQ,CADIC,CAANT;AAWF;AACF;;AAEA,SAASI,uBAAT,CAAiCP,OAAjC,EAA0C;AACxCyB,MAAIC,YAAAA,GAAe7B,sBAAnB4B;;AACA,MAAIzB,OAAAA,IAAWA,OAAO,CAAC2B,SAAvB,EAAkC;AAChC,UAAM;AAAEC,MAAAA,gBAAAA,GAAmB;AAArB,QAAoC5B,OAAO,CAAC6B,MAAlD;AACA,UAAMC,YAAAA,GAAe9B,OAAO,CAAC2B,SAAR3B,CAAkB+B,GAAvC;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAeD,eAAIE,KAAJF,CAAUD,YAAVC,CAArB;;AACA,UAAMG,eAAAA,GAAkBzB,kBAAE0B,SAAF1B,CAAYuB,QAAQ,CAACI,KAATJ,CAAe,GAAfA,CAAZvB,EAAiC,CAAjCA,EAAoCe,IAApCf,CAAyC,GAAzCA,CAAxB;;AACA,QAAI,CAACA,kBAAE4B,QAAF5B,CAAWb,YAAXa,EAAyByB,eAAzBzB,CAAL,EAAgD;AAC9CiB,MAAAA,YAAAA,GAAeK,eAAIO,OAAJP,CAAYD,YAAZC,EAA0BH,gBAA1BG,CAAfL;AACF;AACF;;AACA,SAAON,IAAAA,IAAS,GAAEM,YAAa,IAAGN,IAAK,EAAvC;AACF","file":"../../detach/AssetBundle.js","sourcesContent":["import _ from 'lodash';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport url from 'url';\n\nimport { saveUrlToPathAsync } from './ExponentTools';\n\nconst EXPO_DOMAINS = ['expo.io', 'exp.host', 'expo.test', 'localhost'];\nconst ASSETS_DIR_DEFAULT_URL = 'https://d1wp6m56sqw74a.cloudfront.net/~assets';\n\nexport async function bundleAsync(context, assets, dest) {\n  if (!assets) {\n    return;\n  }\n\n  await fs.ensureDir(dest);\n\n  const urlResolver = createAssetsUrlResolver(context);\n\n  const batches = _.chunk(assets, 5);\n  for (const batch of batches) {\n    await Promise.all(\n      batch.map(async asset => {\n        const extensionIndex = asset.lastIndexOf('.');\n        const prefixLength = 'asset_'.length;\n        const hash =\n          extensionIndex >= 0\n            ? asset.substring(prefixLength, extensionIndex)\n            : asset.substring(prefixLength);\n        await saveUrlToPathAsync(urlResolver(hash), path.join(dest, asset));\n      })\n    );\n  }\n}\n\nfunction createAssetsUrlResolver(context) {\n  let assetsDirUrl = ASSETS_DIR_DEFAULT_URL;\n  if (context && context.published) {\n    const { assetUrlOverride = './assets' } = context.config;\n    const publishedUrl = context.published.url;\n    const { hostname } = url.parse(publishedUrl);\n    const maybeExpoDomain = _.takeRight(hostname.split('.'), 2).join('.');\n    if (!_.includes(EXPO_DOMAINS, maybeExpoDomain)) {\n      assetsDirUrl = url.resolve(publishedUrl, assetUrlOverride);\n    }\n  }\n  return hash => `${assetsDirUrl}/${hash}`;\n}\n"],"sourceRoot":"/@expo/xdl@56.2.7/src"}