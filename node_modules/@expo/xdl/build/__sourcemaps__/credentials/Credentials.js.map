{"version":3,"sources":["credentials/Credentials.ts"],"names":["getCredentialMetadataAsync","projectRoot","platform","exp","user","UserManager","ensureLoggedInAsync","username","owner","bundleIdentifier","ios","experienceName","slug","credentialsExistForPlatformAsync","metadata","credentials","fetchCredentials","getEncryptedCredentialsForPlatformAsync","getCredentialsForPlatform","decrypt","err","Api","callMethodAsync","Error","updateCredentialsForPlatform","newCredentials","userCredentialsIds","removeCredentialsForPlatform"],"mappings":"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","sourcesContent":["import { Platform, readConfigJsonAsync } from '@expo/config';\n\nimport Api from '../Api';\n\nimport UserManager from '../User';\nimport * as Ios from './IosCredentials';\n\nexport type Credentials = Ios.Credentials; // can't import android types from typescript\n\nexport type CredentialMetadata = {\n  username: string;\n  experienceName: string;\n  bundleIdentifier?: string;\n  platform: string;\n};\n\nexport { Ios };\n\nexport async function getCredentialMetadataAsync(\n  projectRoot: string,\n  platform: Platform\n): Promise<CredentialMetadata> {\n  const { exp } = await readConfigJsonAsync(projectRoot);\n\n  const user = await UserManager.ensureLoggedInAsync();\n  let { username } = user;\n  if (exp.owner) {\n    username = exp.owner;\n  }\n\n  const bundleIdentifier = exp.ios ? exp.ios.bundleIdentifier : null;\n\n  return {\n    username,\n    experienceName: `@${username}/${exp.slug}`,\n    bundleIdentifier,\n    platform,\n  };\n}\n\nexport async function credentialsExistForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<boolean> {\n  const credentials = await fetchCredentials(metadata, false);\n  return !!credentials;\n}\n\nexport async function getEncryptedCredentialsForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<Credentials | undefined> {\n  return fetchCredentials(metadata, false);\n}\n\nexport async function getCredentialsForPlatform(\n  metadata: CredentialMetadata\n): Promise<Credentials | undefined> {\n  return fetchCredentials(metadata, true);\n}\n\nasync function fetchCredentials(\n  { username, experienceName, bundleIdentifier, platform }: CredentialMetadata,\n  decrypt: boolean\n): Promise<Credentials | undefined> {\n  // this doesn't hit our mac rpc channel, so it needs significantly less debugging\n  const { err, credentials } = await Api.callMethodAsync('getCredentials', [], 'post', {\n    username,\n    experienceName,\n    bundleIdentifier,\n    platform,\n    decrypt,\n  });\n\n  if (err) {\n    throw new Error('Error fetching credentials.');\n  }\n\n  return credentials;\n}\n\nexport async function updateCredentialsForPlatform(\n  platform: string,\n  newCredentials: Credentials,\n  userCredentialsIds: Array<number>,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const { err, credentials } = await Api.callMethodAsync('updateCredentials', [], 'post', {\n    credentials: newCredentials,\n    userCredentialsIds,\n    platform,\n    ...metadata,\n  });\n\n  if (err || !credentials) {\n    throw new Error('Error updating credentials.');\n  }\n}\n\nexport async function removeCredentialsForPlatform(\n  platform: string,\n  metadata: CredentialMetadata\n): Promise<void> {\n  // doesn't go through mac rpc, no request id needed\n  const { err } = await Api.callMethodAsync('deleteCredentials', [], 'post', {\n    platform,\n    ...metadata,\n  });\n\n  if (err) {\n    throw new Error('Error deleting credentials.');\n  }\n}\n"],"file":"../../credentials/Credentials.js","sourceRoot":"/@expo/xdl@56.2.7/src"}