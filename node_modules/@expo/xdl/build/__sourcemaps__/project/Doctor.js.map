{"version":3,"sources":["project/Doctor.ts"],"names":["NO_ISSUES","WARNING","ERROR","FATAL","MIN_WATCHMAN_VERSION","MIN_NPM_VERSION","CORRECT_NPM_VERSION","WARN_NPM_VERSION_RANGES","BAD_NPM_VERSION_RANGES","_isNpmVersionWithinRanges","npmVersion","ranges","_","some","range","semver","satisfies","_checkNpmVersionAsync","projectRoot","yarnVersionResponse","status","e","npmVersionResponse","trim","stdout","lt","ProjectUtils","logError","logWarning","clearNotification","_checkWatchmanVersionAsync","Watchman","isPlatformSupported","watchmanVersion","unblockAndGetVersionAsync","warningMessage","process","platform","validateWithSchemaFileAsync","schemaPath","exp","readConfigJsonAsync","schema","JSON","parse","fs","readFile","validateWithSchema","configName","sdkVersion","validateAssets","schemaErrorMessage","assetsErrorMessage","validator","Schemer","rootDir","validateSchemaAsync","SchemerError","errors","length","map","formatValidationError","join","validateAssetsAsync","Config","helpUrl","validationError","fieldPath","message","_validateExpJsonAsync","pkg","allowNetwork","expJsonExists","ConfigUtils","fileExistsAsync","path","appJsonExists","configFilenameAsync","env","EXPO_SKIP_MANIFEST_VALIDATION_TOKEN","sdkVersions","Versions","sdkVersionsAsync","keys","ExpSchema","getSchemaAsync","reactNativeIssue","_validateReactNativeVersionAsync","validation","reactNativeVersionWarnings","reactNative","dependencies","isDetached","test","reactNativeTag","match","sdkVersionObject","major","parseSdkVersionFromTag","_validateNodeModulesAsync","nodeModulesPath","resolve","result","statSync","isDirectory","resolveModule","code","validateLowLatencyAsync","validateAsync","validateWithNetworkAsync","getenv","boolish","expStatus","Math","max","ignoreNodeModulesValidation","nodeModulesStatus","EXPO_SDK_INSTALLED_AND_IMPORTED","EXPO_SDK_NOT_INSTALLED","EXPO_SDK_NOT_IMPORTED","getExpoSdkStatus","sdkPkg","mainFilePath","main","mainFile","includes"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport semver from 'semver';\nimport fs from 'fs-extra';\nimport getenv from 'getenv';\nimport path from 'path';\nimport spawnAsync from '@expo/spawn-async';\nimport * as ConfigUtils from '@expo/config';\n\nimport chalk from 'chalk';\nimport inquirer from 'inquirer';\nimport Schemer, { SchemerError, ValidationError } from '@expo/schemer';\n\nimport * as ExpSchema from './ExpSchema';\nimport * as ProjectUtils from './ProjectUtils';\nimport * as AssetUtils from '../AssetUtils';\nimport * as Binaries from '../Binaries';\nimport Config from '../Config';\nimport * as Versions from '../Versions';\nimport * as Watchman from '../Watchman';\nimport XDLError from '../XDLError';\n\nexport const NO_ISSUES = 0;\nexport const WARNING = 1;\nexport const ERROR = 2;\nexport const FATAL = 3;\n\nconst MIN_WATCHMAN_VERSION = '4.6.0';\nconst MIN_NPM_VERSION = '3.0.0';\nconst CORRECT_NPM_VERSION = 'latest';\nconst WARN_NPM_VERSION_RANGES = ['>= 5.0.0 < 5.7.0'];\nconst BAD_NPM_VERSION_RANGES = ['>= 5.0.0 <= 5.0.3'];\n\nfunction _isNpmVersionWithinRanges(npmVersion: string, ranges: string[]) {\n  return _.some(ranges, range => semver.satisfies(npmVersion, range));\n}\n\nasync function _checkNpmVersionAsync(projectRoot: string) {\n  try {\n    try {\n      let yarnVersionResponse = await spawnAsync('yarnpkg', ['--version']);\n      if (yarnVersionResponse.status === 0) {\n        return NO_ISSUES;\n      }\n    } catch (e) {}\n\n    let npmVersionResponse = await spawnAsync('npm', ['--version']);\n    let npmVersion = _.trim(npmVersionResponse.stdout);\n\n    if (\n      semver.lt(npmVersion, MIN_NPM_VERSION) ||\n      _isNpmVersionWithinRanges(npmVersion, BAD_NPM_VERSION_RANGES)\n    ) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: You are using npm version ${npmVersion}. We recommend the latest version ${CORRECT_NPM_VERSION}. To install it, run 'npm i -g npm@${CORRECT_NPM_VERSION}'.`,\n        'doctor-npm-version'\n      );\n      return WARNING;\n    } else if (_isNpmVersionWithinRanges(npmVersion, WARN_NPM_VERSION_RANGES)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: You are using npm version ${npmVersion}. There may be bugs in this version, use it at your own risk. We recommend version ${CORRECT_NPM_VERSION}.`,\n        'doctor-npm-version'\n      );\n    } else {\n      ProjectUtils.clearNotification(projectRoot, 'doctor-npm-version');\n    }\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Could not determine npm version. Make sure your version is >= ${MIN_NPM_VERSION} - we recommend ${CORRECT_NPM_VERSION}.`,\n      'doctor-npm-version'\n    );\n    return WARNING;\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _checkWatchmanVersionAsync(projectRoot: string) {\n  // There's no point in checking any of this stuff if watchman isn't supported on this platform\n  if (!Watchman.isPlatformSupported()) {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  let watchmanVersion = await Watchman.unblockAndGetVersionAsync(projectRoot);\n\n  // If we can't get the watchman version, `getVersionAsync` will return `null`\n  if (!watchmanVersion) {\n    // watchman is probably just not installed\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n    return;\n  }\n\n  if (semver.lt(watchmanVersion, MIN_WATCHMAN_VERSION)) {\n    let warningMessage = `Warning: You are using an old version of watchman (v${watchmanVersion}). This may cause problems for you.\\n\\nWe recommend that you either uninstall watchman (and XDE will try to use a copy it is bundled with) or upgrade watchman to a newer version, at least v${MIN_WATCHMAN_VERSION}.`;\n\n    // Add a note about homebrew if the user is on a Mac\n    if (process.platform === 'darwin') {\n      warningMessage += `\\n\\nIf you are using homebrew, try:\\nbrew uninstall watchman; brew install watchman`;\n    }\n    ProjectUtils.logWarning(projectRoot, 'expo', warningMessage, 'doctor-watchman-version');\n  } else {\n    ProjectUtils.clearNotification(projectRoot, 'doctor-watchman-version');\n  }\n}\n\nexport async function validateWithSchemaFileAsync(\n  projectRoot: string,\n  schemaPath: string\n): Promise<{ schemaErrorMessage: string | undefined; assetsErrorMessage: string | undefined }> {\n  let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n  let schema = JSON.parse(await fs.readFile(schemaPath, 'utf8'));\n  return validateWithSchema(projectRoot, exp, schema.schema, 'exp.json', 'UNVERSIONED', true);\n}\n\nexport async function validateWithSchema(\n  projectRoot: string,\n  exp: any,\n  schema: any,\n  configName: string,\n  sdkVersion: string,\n  validateAssets: boolean\n): Promise<{ schemaErrorMessage: string | undefined; assetsErrorMessage: string | undefined }> {\n  let schemaErrorMessage;\n  let assetsErrorMessage;\n  let validator = new Schemer(schema, { rootDir: projectRoot });\n\n  // Validate the schema itself\n  try {\n    await validator.validateSchemaAsync(exp);\n  } catch (e) {\n    if (e instanceof SchemerError) {\n      schemaErrorMessage = `Error: Problem${e.errors.length > 1\n        ? 's'\n        : ''} validating fields in ${configName}. See https://docs.expo.io/versions/v${sdkVersion}/workflow/configuration/`;\n      schemaErrorMessage += e.errors.map(formatValidationError).join('');\n    }\n  }\n\n  if (validateAssets) {\n    try {\n      await validator.validateAssetsAsync(exp);\n    } catch (e) {\n      if (e instanceof SchemerError) {\n        assetsErrorMessage = `Error: Problem${e.errors.length > 1\n          ? ''\n          : 's'} validating asset fields in ${configName}. See ${Config.helpUrl}`;\n        assetsErrorMessage += e.errors.map(formatValidationError).join('');\n      }\n    }\n  }\n  return { schemaErrorMessage, assetsErrorMessage };\n}\n\nfunction formatValidationError(validationError: ValidationError) {\n  return `\\n • ${validationError.fieldPath\n    ? 'Field: ' + validationError.fieldPath + ' - '\n    : ''}${validationError.message}.`;\n}\n\nasync function _validateExpJsonAsync(\n  exp: ConfigUtils.ExpoConfig,\n  pkg: ConfigUtils.PackageJSONConfig,\n  projectRoot: string,\n  allowNetwork: boolean\n): Promise<number> {\n  if (!exp || !pkg) {\n    // readConfigJsonAsync already logged an error\n    return FATAL;\n  }\n\n  try {\n    await _checkWatchmanVersionAsync(projectRoot);\n  } catch (e) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Problem checking watchman version. ${e.message}.`,\n      'doctor-problem-checking-watchman-version'\n    );\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-problem-checking-watchman-version');\n\n  const expJsonExists = await ConfigUtils.fileExistsAsync(path.join(projectRoot, 'exp.json'));\n  const appJsonExists = await ConfigUtils.fileExistsAsync(path.join(projectRoot, 'app.json'));\n\n  if (expJsonExists && appJsonExists) {\n    ProjectUtils.logWarning(\n      projectRoot,\n      'expo',\n      `Warning: Both app.json and exp.json exist in this directory. Only one should exist for a single project.`,\n      'doctor-both-app-and-exp-json'\n    );\n    return WARNING;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-both-app-and-exp-json');\n\n  let sdkVersion = exp.sdkVersion;\n  const configName = await ConfigUtils.configFilenameAsync(projectRoot);\n\n  // Warn if sdkVersion is UNVERSIONED\n  if (sdkVersion === 'UNVERSIONED' && !process.env.EXPO_SKIP_MANIFEST_VALIDATION_TOKEN) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Using unversioned Expo SDK. Do not publish until you set sdkVersion in ${configName}`,\n      'doctor-unversioned'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-unversioned');\n\n  let sdkVersions = await Versions.sdkVersionsAsync();\n  if (!sdkVersions) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Couldn't connect to SDK versions server`,\n      'doctor-versions-endpoint-failed'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-versions-endpoint-failed');\n\n  if (!sdkVersion || !sdkVersions[sdkVersion]) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: Invalid sdkVersion. Valid options are ${_.keys(sdkVersions).join(', ')}`,\n      'doctor-invalid-sdk-version'\n    );\n    return ERROR;\n  }\n  ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-sdk-version');\n\n  // Skip validation if the correct token is set in env\n  if (sdkVersion !== 'UNVERSIONED') {\n    try {\n      let schema = await ExpSchema.getSchemaAsync(sdkVersion);\n      let { schemaErrorMessage, assetsErrorMessage } = await validateWithSchema(\n        projectRoot,\n        exp,\n        schema,\n        configName,\n        sdkVersion,\n        allowNetwork\n      );\n\n      if (schemaErrorMessage) {\n        ProjectUtils.logError(projectRoot, 'expo', schemaErrorMessage, 'doctor-schema-validation');\n      } else {\n        ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation');\n      }\n      if (assetsErrorMessage) {\n        ProjectUtils.logError(\n          projectRoot,\n          'expo',\n          assetsErrorMessage,\n          `doctor-validate-asset-fields`\n        );\n      } else {\n        ProjectUtils.clearNotification(projectRoot, `doctor-validate-asset-fields`);\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-schema-validation-exception');\n      if (schemaErrorMessage || assetsErrorMessage) return ERROR;\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Problem validating ${configName}: ${e.message}.`,\n        'doctor-schema-validation-exception'\n      );\n    }\n  }\n\n  const reactNativeIssue = await _validateReactNativeVersionAsync(\n    exp,\n    pkg,\n    projectRoot,\n    sdkVersions,\n    sdkVersion\n  );\n\n  if (reactNativeIssue !== NO_ISSUES) {\n    return reactNativeIssue;\n  }\n\n  // TODO: Check any native module versions here\n\n  return NO_ISSUES;\n}\n\nasync function _validateReactNativeVersionAsync(\n  exp: ConfigUtils.ExpoConfig,\n  pkg: ConfigUtils.PackageJSONConfig,\n  projectRoot: string,\n  sdkVersions: Versions.SDKVersions,\n  sdkVersion: string\n): Promise<number> {\n  if (Config.validation.reactNativeVersionWarnings) {\n    let reactNative = pkg.dependencies ? pkg.dependencies['react-native'] : null;\n\n    // react-native is required\n    if (!reactNative) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: Can't find react-native in package.json dependencies`,\n        'doctor-no-react-native-in-package-json'\n      );\n      return ERROR;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-no-react-native-in-package-json');\n\n    if (!exp.isDetached) {\n      return NO_ISSUES;\n\n      // (TODO-2017-07-20): Validate the react-native version if it uses\n      // officially published package rather than Expo fork. Expo fork of\n      // react-native was required before CRNA. We now only run the react-native\n      // validation of the version if we are using the fork. We should probably\n      // validate the version here as well such that it matches with the\n      // react-native version compatible with the selected SDK.\n    }\n\n    // Expo fork of react-native is required\n    if (!/expo\\/react-native/.test(reactNative)) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: Not using the Expo fork of react-native. See ${Config.helpUrl}.`,\n        'doctor-not-using-expo-fork'\n      );\n      return WARNING;\n    }\n    ProjectUtils.clearNotification(projectRoot, 'doctor-not-using-expo-fork');\n\n    try {\n      let reactNativeTag = reactNative.match(/sdk-\\d+\\.\\d+\\.\\d+/)[0];\n      let sdkVersionObject = sdkVersions[sdkVersion];\n\n      // TODO: Want to be smarter about this. Maybe warn if there's a newer version.\n      if (\n        semver.major(Versions.parseSdkVersionFromTag(reactNativeTag)) !==\n        semver.major(Versions.parseSdkVersionFromTag(sdkVersionObject['expoReactNativeTag']))\n      ) {\n        ProjectUtils.logWarning(\n          projectRoot,\n          'expo',\n          `Warning: Invalid version of react-native for sdkVersion ${sdkVersion}. Use github:expo/react-native#${sdkVersionObject[\n            'expoReactNativeTag'\n          ]}`,\n          'doctor-invalid-version-of-react-native'\n        );\n        return WARNING;\n      }\n      ProjectUtils.clearNotification(projectRoot, 'doctor-invalid-version-of-react-native');\n\n      ProjectUtils.clearNotification(projectRoot, 'doctor-malformed-version-of-react-native');\n    } catch (e) {\n      ProjectUtils.logWarning(\n        projectRoot,\n        'expo',\n        `Warning: ${reactNative} is not a valid version. Version must be in the form of sdk-x.y.z. Please update your package.json file.`,\n        'doctor-malformed-version-of-react-native'\n      );\n      return WARNING;\n    }\n  }\n\n  return NO_ISSUES;\n}\n\nasync function _validateNodeModulesAsync(projectRoot: string): Promise<number> {\n  let { exp } = await ConfigUtils.readConfigJsonAsync(projectRoot);\n  let nodeModulesPath = projectRoot;\n  if (exp.nodeModulesPath) {\n    nodeModulesPath = path.resolve(projectRoot, exp.nodeModulesPath);\n  }\n\n  // Check to make sure node_modules exists at all\n  try {\n    let result = fs.statSync(path.join(nodeModulesPath, 'node_modules'));\n    if (!result.isDirectory()) {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n        'doctor-node-modules-missing'\n      );\n      return FATAL;\n    }\n\n    ProjectUtils.clearNotification(projectRoot, 'doctor-node-modules-missing');\n  } catch (e) {\n    ProjectUtils.logError(\n      projectRoot,\n      'expo',\n      `Error: node_modules directory is missing. Please run \\`npm install\\` in your project directory.`,\n      'doctor-node-modules-missing'\n    );\n    return FATAL;\n  }\n\n  // Check to make sure react native is installed\n  try {\n    ConfigUtils.resolveModule('react-native/local-cli/cli.js', projectRoot, exp);\n    ProjectUtils.clearNotification(projectRoot, 'doctor-react-native-not-installed');\n  } catch (e) {\n    if (e.code === 'MODULE_NOT_FOUND') {\n      ProjectUtils.logError(\n        projectRoot,\n        'expo',\n        `Error: React Native is not installed. Please run \\`npm install\\` in your project directory.`,\n        'doctor-react-native-not-installed'\n      );\n      return FATAL;\n    } else {\n      throw e;\n    }\n  }\n  return NO_ISSUES;\n}\n\nexport async function validateLowLatencyAsync(projectRoot: string): Promise<number> {\n  return validateAsync(projectRoot, false);\n}\n\nexport async function validateWithNetworkAsync(projectRoot: string): Promise<number> {\n  return validateAsync(projectRoot, true);\n}\n\nasync function validateAsync(projectRoot: string, allowNetwork: boolean): Promise<number> {\n  if (getenv.boolish('EXPO_NO_DOCTOR', false)) {\n    return NO_ISSUES;\n  }\n\n  let { exp, pkg } = await ConfigUtils.readConfigJsonAsync(projectRoot);\n\n  let status = await _checkNpmVersionAsync(projectRoot);\n  if (status === FATAL) {\n    return status;\n  }\n\n  const expStatus = await _validateExpJsonAsync(exp, pkg, projectRoot, allowNetwork);\n  if (expStatus === FATAL) {\n    return expStatus;\n  }\n\n  status = Math.max(status, expStatus);\n\n  if (exp && !exp.ignoreNodeModulesValidation) {\n    let nodeModulesStatus = await _validateNodeModulesAsync(projectRoot);\n    if (nodeModulesStatus > status) {\n      return nodeModulesStatus;\n    }\n  }\n\n  return status;\n}\n\ntype ExpoSdkStatus = 0 | 1 | 2;\n\nexport const EXPO_SDK_INSTALLED_AND_IMPORTED = 0;\nexport const EXPO_SDK_NOT_INSTALLED = 1;\nexport const EXPO_SDK_NOT_IMPORTED = 2;\n\nexport async function getExpoSdkStatus(projectRoot: string): Promise<ExpoSdkStatus> {\n  let { pkg } = await ConfigUtils.readConfigJsonAsync(projectRoot);\n\n  try {\n    let sdkPkg;\n    if (pkg.dependencies['exponent']) {\n      sdkPkg = 'exponent';\n    } else if (pkg.dependencies['expo']) {\n      sdkPkg = 'expo';\n    } else {\n      return EXPO_SDK_NOT_INSTALLED;\n    }\n\n    let mainFilePath = path.join(projectRoot, pkg.main);\n    let mainFile = await fs.readFile(mainFilePath, 'utf8');\n\n    // TODO: support separate .ios.js and .android.js files\n    if (mainFile.includes(`from '${sdkPkg}'`) || mainFile.includes(`require('${sdkPkg}')`)) {\n      return EXPO_SDK_INSTALLED_AND_IMPORTED;\n    } else {\n      return EXPO_SDK_NOT_IMPORTED;\n    }\n  } catch (e) {\n    return EXPO_SDK_NOT_IMPORTED;\n  }\n}\n"],"file":"../../project/Doctor.js","sourceRoot":"/@expo/xdl@56.2.7/src"}