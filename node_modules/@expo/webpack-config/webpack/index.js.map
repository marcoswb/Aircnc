{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAEA,gEAA8C;AAC9C,kEAA8C;AAC9C,mCAAkC;AAClC,6DAA+C;AAC/C,+CAAuD;AAEvD,mBACE,GAAqB,EACrB,OAAkB,EAAE;;QAEpB,MAAM,WAAW,GAAgB,8BAAmB,CAAC,GAAG,CAAC,CAAC;QAC1D,MAAM,IAAI,GAAG,eAAO,CAAC,WAAW,CAAC,CAAC;QAClC,IAAI,MAAwC,CAAC;QAC7C,IAAI,IAAI,KAAK,aAAa,EAAE;YAC1B,MAAM,GAAG,MAAM,qBAAiB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SACrD;aAAM;YACL,MAAM,GAAG,MAAM,sBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SACpD;QAED,IAAI,WAAW,CAAC,IAAI,EAAE;YACpB,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;SAC5C;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;CAAA;AAlBD,4BAkBC","sourcesContent":["import { Configuration } from 'webpack';\nimport { Environment, InputEnvironment, Arguments, DevConfiguration } from './types';\nimport developmentConfig from './webpack.dev';\nimport productionConfig from './webpack.prod';\nimport { getMode } from './utils';\nimport * as Diagnosis from './utils/Diagnosis';\nimport { validateEnvironment } from './utils/validate';\n\nexport default async function(\n  env: InputEnvironment,\n  argv: Arguments = {}\n): Promise<Configuration | DevConfiguration> {\n  const environment: Environment = validateEnvironment(env);\n  const mode = getMode(environment);\n  let config: Configuration | DevConfiguration;\n  if (mode === 'development') {\n    config = await developmentConfig(environment, argv);\n  } else {\n    config = await productionConfig(environment, argv);\n  }\n\n  if (environment.info) {\n    Diagnosis.reportAsync(config, environment);\n  }\n\n  return config;\n}\n"]}