{"version":3,"file":"webpack.config.unimodules.js","sourceRoot":"","sources":["../src/webpack.config.unimodules.ts"],"names":[],"mappings":";;;;;AAQA,sFAAqD;AAErD,oFAA4D;AAC5D,kFAA0D;AAC1D,uCAA6C;AAE7C,mCAAiE;AACjE,kEAA0C;AAC1C,8DAAsC;AACtC,yCAAyD;AAEzD,iDAAiD;AACjD,mBAAwB,GAAgB,EAAE,IAAe;IACvD,MAAM;IACJ;;;OAGG;IACH,UAAU;IACV;;;;;;;OAOG;IACH,mBAAmB,GAAG,IAAI,GAC3B,GAAG,IAAI,CAAC;IAET,MAAM,MAAM,GAAG,UAAU,IAAI,mBAAS,CAAC,GAAG,CAAC,CAAC;IAE5C,MAAM,SAAS,GAAG,GAAG,CAAC,SAAS,IAAI,gBAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC7D,MAAM,IAAI,GAAG,iBAAO,CAAC,GAAG,CAAC,CAAC;IAE1B,MAAM,WAAW,GAAG,2BAAiB,CAAC;QACpC,IAAI;QACJ,gBAAgB,EAAE,SAAS,CAAC,IAAI;KACjC,CAAC,CAAC;IAEH,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,sBAAc,CAAC,GAAG,CAAC,CAAC;IAEtD,MAAM,OAAO,GAAG;QACd;YACE,IAAI,EAAE,SAAS;YACf,GAAG,EAAE,CAAC,aAAa,CAAC;YACpB,OAAO,EAAE,SAAS,CAAC,QAAQ,CAAC,MAAM;SACnC;QACD,qCAAqC;QACrC,WAAW;KACZ,CAAC;IAEF,IAAI,mBAAmB,EAAE;QACvB,MAAM,uBAAuB,GAAG,0BAAgB,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC;QAChE,OAAO,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;KACvC;IAED,OAAO;QACL,qGAAqG;QACrG,IAAI;QACJ,qCAAqC;QACrC,MAAM,EAAE;YACN,2CAA2C;YAC3C,6BAA6B;YAC7B,UAAU;SACX;QACD,OAAO,EAAE;YACP,2EAA2E;YAC3E,0EAA0E;YAC1E,gCAAgC;YAChC,IAAI,iCAAc,CAAC;gBACjB,QAAQ,EAAE,qBAAqB;gBAC/B,UAAU;aACX,CAAC;YACF,IAAI,0BAAgB,CAAC;gBACnB,IAAI;gBACJ,SAAS;gBACT,MAAM;gBACN,sBAAsB,EAAE,SAAS,CAAC,UAAU,CAAC,QAAQ;aACtD,CAAC;SACH;QACD,MAAM,EAAE;YACN,oBAAoB,EAAE,KAAK;YAE3B,KAAK,EAAE,OAAO;SACf;QACD,OAAO,EAAE;YACP,QAAQ,EAAE,KAAK;YACf,KAAK,EAAE,qBAAa;YACpB,UAAU,EAAE,+BAAuB,CAAC,KAAK,CAAC;SAC3C;KACF,CAAC;AACJ,CAAC;AAhFD,4BAgFC","sourcesContent":["/**\n * A bare webpack config that is required for using\n * react-native-web & Unimodules in the browser.\n *\n * This should be used to inject basic support into systems\n * like react-scripts and storybook.\n */\nimport { Configuration } from 'webpack';\nimport ManifestPlugin from 'webpack-manifest-plugin';\n\nimport createBabelLoader from './loaders/createBabelLoader';\nimport createFontLoader from './loaders/createFontLoader';\nimport { ExpoDefinePlugin } from './plugins';\nimport { Arguments, DevConfiguration, Environment } from './types';\nimport { DEFAULT_ALIAS, getModuleFileExtensions } from './utils';\nimport getConfig from './utils/getConfig';\nimport getMode from './utils/getMode';\nimport { getPaths, getPublicPaths } from './utils/paths';\n\n// { production, development, mode, projectRoot }\nexport default function(env: Environment, argv: Arguments): DevConfiguration | Configuration {\n  const {\n    /**\n     * The project's `app.json`\n     * This will be used to populate the `Constants.manifest` in the Unimodule `expo-constants`\n     */\n    expoConfig,\n    /**\n     * **Dangerously** disable the default font loading configuration.\n     * If you are merging `webpack.config.unimodules` with another less flexible config,\n     * you may want to disable font loading in favor of a manually defined loader.\n     *\n     * If you do this, be sure to include `@expo/vector-icons` & `react-native-vector-icons`\n     * otherwise icons won't work as expected.\n     */\n    supportsFontLoading = true,\n  } = argv;\n\n  const config = expoConfig || getConfig(env);\n\n  const locations = env.locations || getPaths(env.projectRoot);\n  const mode = getMode(env);\n\n  const babelConfig = createBabelLoader({\n    mode,\n    babelProjectRoot: locations.root,\n  });\n\n  const { publicPath, publicUrl } = getPublicPaths(env);\n\n  const loaders = [\n    {\n      test: /\\.html$/,\n      use: ['html-loader'],\n      exclude: locations.template.folder,\n    },\n    // Process application JS with Babel.\n    babelConfig,\n  ];\n\n  if (supportsFontLoading) {\n    const fontLoaderConfiguration = createFontLoader({ locations });\n    loaders.push(fontLoaderConfiguration);\n  }\n\n  return {\n    // TODO: Bacon: It would be good not to define mode here. We currently need to for the env variables.\n    mode,\n    // configures where the build ends up\n    output: {\n      // This is the URL that app is served from.\n      // We use \"/\" in development.\n      publicPath,\n    },\n    plugins: [\n      // Generate a manifest file which contains a mapping of all asset filenames\n      // to their corresponding output file so that tools can pick it up without\n      // having to parse `index.html`.\n      new ManifestPlugin({\n        fileName: 'asset-manifest.json',\n        publicPath,\n      }),\n      new ExpoDefinePlugin({\n        mode,\n        publicUrl,\n        config,\n        productionManifestPath: locations.production.manifest,\n      }),\n    ],\n    module: {\n      strictExportPresence: false,\n\n      rules: loaders,\n    },\n    resolve: {\n      symlinks: false,\n      alias: DEFAULT_ALIAS,\n      extensions: getModuleFileExtensions('web'),\n    },\n  };\n}\n"]}